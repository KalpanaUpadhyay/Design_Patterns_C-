âœ… What are Design Patterns? Why are they important?

ðŸ”¹ What are Design Patterns?
Design patterns are proven, reusable solutions to common problems in software design.

ðŸ”¹ Why learn them?
Improve code reusability, readability, and extensibility

Communicate solutions using a shared vocabulary ("Letâ€™s use the Observer Pattern")

Ace system design and low-level design rounds in interviews

ðŸ”¸ Categories of Design Patterns:
Creational â€“ Deals with object creation (e.g., Singleton, Factory)

Structural â€“ Deals with object composition (e.g., Adapter, Decorator)

Behavioral â€“ Deals with communication between objects (e.g., Observer, Strategy)

âœ… SOLID Principles â€“ Backbone of Design Patterns
| Principle                 | Meaning                                         | Quick Example                                                |
| ------------------------- | ----------------------------------------------- | ------------------------------------------------------------ |
| S â€“ Single Responsibility | A class should have only one reason to change   | Split `UserManager` into `UserAuth`, `UserProfile`           |
| O â€“ Open/Closed           | Open for extension, closed for modification     | Use inheritance/interfaces instead of modifying base code    |
| L â€“ Liskov Substitution   | Subtypes must be replaceable                    | `Bird` â†’ `Penguin` shouldn't break `fly()` if it doesn't fly |
| I â€“ Interface Segregation | Donâ€™t force clients to implement unused methods | Separate large interfaces                                    |
| D â€“ Dependency Inversion  | Depend on abstractions, not concrete classes    | Use interfaces or abstract classes                           |
