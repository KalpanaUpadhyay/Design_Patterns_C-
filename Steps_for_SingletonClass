‚úÖ Steps to Create a Singleton Class

1Ô∏è‚É£ Make Constructor Private
Prevents others from creating objects with new or directly calling the constructor.
 Singleton {
private:
    Singleton() {}  // üëà Private constructor
};

‚úÖ Why?
Prevents other classes or code from doing Singleton s; or new Singleton();
Enforces the rule: only one object is allowed.
The object can only be created from inside the class ‚Äî specifically from getInstance().


2Ô∏è‚É£ Delete Copy and Assignment
Prevents duplication of the singleton via copy or assignment.
Singleton(const Singleton&) = delete;
Singleton& operator=(const Singleton&) = delete;

‚úÖ Why?
Prevents creating multiple copies of the singleton using:
Singleton s2 = s1; (copy constructor)
s2 = s1; (assignment)
If you don‚Äôt delete these, your Singleton isn‚Äôt really one instance ‚Äî it can be cloned.

3Ô∏è‚É£ Add a Static Instance Pointer
Holds the one and only instance of the class.
static Singleton* instance;

‚úÖ Why?
This is where the one and only object lives.
It's static, so:
Exists once for the class, not per object.
Is shared across all usages of the class.

4Ô∏è‚É£ Add a Static Getter Function
Lazily creates the instance and returns it.

static Singleton* getInstance() {
    if (instance == nullptr) {
        instance = new Singleton();
    }
    return instance;
}

‚úÖ Why?
This function gives controlled access to the Singleton object.
If the instance is not created yet ‚Üí it creates one.
If already created ‚Üí it returns the existing one.
Central place to manage object lifecycle.

5Ô∏è‚É£ (Optional) Add Thread Safety
Use a std::mutex to make sure only one thread can create the instance.
static std::mutex mutex_;
std::lock_guard<std::mutex> lock(mutex_);

‚úÖ Why?
In multithreaded code, two threads might both see instance == nullptr and create two objects.
A mutex ensures that only one thread creates the Singleton.
lock_guard auto-locks and unlocks, so you avoid deadlocks.



üîÑ Summary Rule Table
| Step                    | Purpose                     |
| ----------------------- | --------------------------- |
| `private` constructor   | Blocks external creation    |
| `delete` copy/assign    | Prevents copies             |
| `static Singleton*`     | Stores the instance         |
| `getInstance()`         | Returns or creates instance |
| `std::mutex` (optional) | Thread safety               |

